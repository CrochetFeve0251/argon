// import * as Argon from 'argon'
import * as Argon from '../../src/argon';
window['Argon'] = Argon;
export var app = Argon.initRealityViewer();
export var scene = new THREE.Scene();
export var camera = new THREE.PerspectiveCamera();
export var user = new THREE.Object3D();
export var userLocation = new THREE.Object3D;
scene.add(camera);
scene.add(user);
scene.add(userLocation);
var renderer = new THREE.WebGLRenderer({
    alpha: true,
    logarithmicDepthBuffer: true,
    antialias: Argon.suggestedWebGLContextAntialiasAttribute
});
renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
app.view.element.appendChild(renderer.domElement);
// app.context.defaultReferenceFrame = app.context.localOriginEastUpSouth;
app.context.defaultReferenceFrame = app.context.localOriginEastNorthUp;
var geometry = new THREE.SphereGeometry(30, 32, 32);
var mat = new THREE.MeshBasicMaterial({ color: 0xff0000 });
export var posXSphere = new THREE.Mesh(geometry, mat);
posXSphere.position.x = 200;
userLocation.add(posXSphere);
mat = new THREE.MeshBasicMaterial({ color: 0xffaaaa });
export var negXSphere = new THREE.Mesh(geometry, mat);
negXSphere.position.x = -200;
userLocation.add(negXSphere);
mat = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
export var posYSphere = new THREE.Mesh(geometry, mat);
posYSphere.position.y = 200;
userLocation.add(posYSphere);
mat = new THREE.MeshBasicMaterial({ color: 0xaaffaa });
export var negYSphere = new THREE.Mesh(geometry, mat);
negYSphere.position.y = -200;
userLocation.add(negYSphere);
mat = new THREE.MeshBasicMaterial({ color: 0x0000ff });
export var posZSphere = new THREE.Mesh(geometry, mat);
posZSphere.position.z = 200;
userLocation.add(posZSphere);
mat = new THREE.MeshBasicMaterial({ color: 0xaaaaff });
export var negZSphere = new THREE.Mesh(geometry, mat);
negZSphere.position.z = -200;
userLocation.add(negZSphere);
var axisHelper = new THREE.AxisHelper(10);
userLocation.add(axisHelper);
axisHelper.position.z = 50;
var axisHelper = new THREE.AxisHelper(10);
userLocation.add(axisHelper);
axisHelper.position.y = -50;
var perspectiveProjection = new Argon.Cesium.PerspectiveFrustum();
perspectiveProjection.fov = Math.PI / 2;
app.device.frameStateEvent.addEventListener(function (suggestedFrameState) {
    var frameState = app.device.createContextFrameState(suggestedFrameState.time, suggestedFrameState.viewport, suggestedFrameState.subviews, {
        overrideUser: true,
        userTracking: suggestedFrameState.userTracking
    });
    app.context.submitFrameState(frameState);
});
app.updateEvent.addEventListener(function () {
    var userPose = app.context.getEntityPose(app.context.user);
    if (userPose.status & Argon.PoseStatus.KNOWN) {
        user.position.copy(userPose.position);
        user.quaternion.copy(userPose.orientation);
        userLocation.position.copy(userPose.position);
    }
});
app.renderEvent.addEventListener(function () {
    var viewport = app.view.viewport;
    renderer.setSize(viewport.width, viewport.height);
    renderer.setPixelRatio(app.suggestedPixelRatio);
    for (var _i = 0, _a = app.view.subviews; _i < _a.length; _i++) {
        var subview = _a[_i];
        camera.position.copy(subview.pose.position);
        camera.quaternion.copy(subview.pose.orientation);
        camera.projectionMatrix.fromArray(subview.frustum.projectionMatrix);
        var _b = subview.viewport, x = _b.x, y = _b.y, width = _b.width, height = _b.height;
        renderer.setViewport(x, y, width, height);
        renderer.setScissor(x, y, width, height);
        renderer.setScissorTest(true);
        renderer.render(scene, camera);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tX3JlYWxpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjdXN0b21fcmVhbGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQ0FBaUM7QUFDakMsT0FBTyxLQUFLLEtBQUssTUFBTSxpQkFBaUIsQ0FBQTtBQUl4QyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBRXhCLE1BQU0sQ0FBQyxJQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztBQUU3QyxNQUFNLENBQUMsSUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDdkMsTUFBTSxDQUFDLElBQU0sTUFBTSxHQUFHLElBQUksS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUM7QUFDcEQsTUFBTSxDQUFDLElBQU0sSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3pDLE1BQU0sQ0FBQyxJQUFNLFlBQVksR0FBRyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFDL0MsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNsQixLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hCLEtBQUssQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFeEIsSUFBTSxRQUFRLEdBQUcsSUFBSSxLQUFLLENBQUMsYUFBYSxDQUFDO0lBQ3JDLEtBQUssRUFBRSxJQUFJO0lBQ1gsc0JBQXNCLEVBQUUsSUFBSTtJQUM1QixTQUFTLEVBQUUsS0FBSyxDQUFDLHVDQUF1QztDQUMzRCxDQUFDLENBQUM7QUFDSCxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDN0QsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFFBQVEs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QUFRLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ2xDO0FBQ0wsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgKiBhcyBBcmdvbiBmcm9tICdhcmdvbidcbmltcG9ydCAqIGFzIEFyZ29uIGZyb20gJy4uLy4uL3NyYy9hcmdvbidcblxuZGVjbGFyZSBjb25zdCBUSFJFRTogYW55O1xuXG53aW5kb3dbJ0FyZ29uJ10gPSBBcmdvbjtcblxuZXhwb3J0IGNvbnN0IGFwcCA9IEFyZ29uLmluaXRSZWFsaXR5Vmlld2VyKCk7XG5cbmV4cG9ydCBjb25zdCBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xuZXhwb3J0IGNvbnN0IGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSgpO1xuZXhwb3J0IGNvbnN0IHVzZXIgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcbmV4cG9ydCBjb25zdCB1c2VyTG9jYXRpb24gPSBuZXcgVEhSRUUuT2JqZWN0M0Q7XG5zY2VuZS5hZGQoY2FtZXJhKTtcbnNjZW5lLmFkZCh1c2VyKTtcbnNjZW5lLmFkZCh1c2VyTG9jYXRpb24pO1xuXG5jb25zdCByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHtcbiAgICBhbHBoYTogdHJ1ZSwgXG4gICAgbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjogdHJ1ZSxcbiAgICBhbnRpYWxpYXM6IEFyZ29uLnN1Z2dlc3RlZFdlYkdMQ29udGV4dEFudGlhbGlhc0F0dHJpYnV0ZVxufSk7XG5yZW5kZXJlci5zZXRQaXhlbFJhdGlvKE1hdGgubWluKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLCAyKSk7XG5hcHAudmlldy5lbGVtZW50LmFwcGVuZENoaWxkKHJlbmRlcmVyLmRvbUVsZW1lbnQpO1xuXG4vLyBhcHAuY29udGV4dC5kZWZhdWx0UmVmZXJlbmNlRnJhbWUgPSBhcHAuY29udGV4dC5sb2NhbE9yaWdpbkVhc3RVcFNvdXRoO1xuYXBwLmNvbnRleHQuZGVmYXVsdFJlZmVyZW5jZUZyYW1lID0gYXBwLmNvbnRleHQubG9jYWxPcmlnaW5FYXN0Tm9ydGhVcDtcblxuY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoIDMwLCAzMiwgMzIgKTtcblxubGV0IG1hdCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCgge2NvbG9yOiAweGZmMDAwMH0gKTtcblxuZXhwb3J0IGNvbnN0IHBvc1hTcGhlcmUgPSBuZXcgVEhSRUUuTWVzaCggZ2VvbWV0cnksIG1hdCApO1xucG9zWFNwaGVyZS5wb3NpdGlvbi54ID0gMjAwO1xudXNlckxvY2F0aW9uLmFkZCggcG9zWFNwaGVyZSApO1xuXG5tYXQgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIHtjb2xvcjogMHhmZmFhYWF9ICk7XG5cbmV4cG9ydCBjb25zdCBuZWdYU3BoZXJlID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCBtYXQgKTtcbm5lZ1hTcGhlcmUucG9zaXRpb24ueCA9IC0yMDA7XG51c2VyTG9jYXRpb24uYWRkKCBuZWdYU3BoZXJlICk7XG5cbm1hdCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCgge2NvbG9yOiAweDAwZmYwMH0gKTtcblxuZXhwb3J0IGNvbnN0IHBvc1lTcGhlcmUgPSBuZXcgVEhSRUUuTWVzaCggZ2VvbWV0cnksIG1hdCApO1xucG9zWVNwaGVyZS5wb3NpdGlvbi55ID0gMjAwO1xudXNlckxvY2F0aW9uLmFkZCggcG9zWVNwaGVyZSApO1xuXG5tYXQgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIHtjb2xvcjogMHhhYWZmYWF9ICk7XG5cbmV4cG9ydCBjb25zdCBuZWdZU3BoZXJlID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCBtYXQgKTtcbm5lZ1lTcGhlcmUucG9zaXRpb24ueSA9IC0yMDA7XG51c2VyTG9jYXRpb24uYWRkKCBuZWdZU3BoZXJlICk7XG5cbm1hdCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCgge2NvbG9yOiAweDAwMDBmZn0gKTtcblxuZXhwb3J0IGNvbnN0IHBvc1pTcGhlcmUgPSBuZXcgVEhSRUUuTWVzaCggZ2VvbWV0cnksIG1hdCApO1xucG9zWlNwaGVyZS5wb3NpdGlvbi56ID0gMjAwO1xudXNlckxvY2F0aW9uLmFkZCggcG9zWlNwaGVyZSApO1xuXG5tYXQgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIHtjb2xvcjogMHhhYWFhZmZ9ICk7XG5cbmV4cG9ydCBjb25zdCBuZWdaU3BoZXJlID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCBtYXQgKTtcbm5lZ1pTcGhlcmUucG9zaXRpb24ueiA9IC0yMDA7XG51c2VyTG9jYXRpb24uYWRkKCBuZWdaU3BoZXJlICk7XG5cbiAgICAgICAgICAgIFxudmFyIGF4aXNIZWxwZXIgPSBuZXcgVEhSRUUuQXhpc0hlbHBlciggMTAgKTtcbnVzZXJMb2NhdGlvbi5hZGQoIGF4aXNIZWxwZXIgKTtcbmF4aXNIZWxwZXIucG9zaXRpb24ueiA9IDUwO1xuXG52YXIgYXhpc0hlbHBlciA9IG5ldyBUSFJFRS5BeGlzSGVscGVyKCAxMCApO1xudXNlckxvY2F0aW9uLmFkZCggYXhpc0hlbHBlciApO1xuYXhpc0hlbHBlci5wb3NpdGlvbi55ID0gLTUwO1xuXG52YXIgcGVyc3BlY3RpdmVQcm9qZWN0aW9uID0gbmV3IEFyZ29uLkNlc2l1bS5QZXJzcGVjdGl2ZUZydXN0dW0oKTtcbnBlcnNwZWN0aXZlUHJvamVjdGlvbi5mb3YgPSBNYXRoLlBJIC8gMjtcblxuYXBwLmRldmljZS5mcmFtZVN0YXRlRXZlbnQuYWRkRXZlbnRMaXN0ZW5lcigoc3VnZ2VzdGVkRnJhbWVTdGF0ZTpBcmdvbi5EZXZpY2VGcmFtZVN0YXRlKSA9PiB7XG4gICAgY29uc3QgZnJhbWVTdGF0ZSA9IGFwcC5kZXZpY2UuY3JlYXRlQ29udGV4dEZyYW1lU3RhdGUoXG4gICAgICAgIHN1Z2dlc3RlZEZyYW1lU3RhdGUudGltZSxcbiAgICAgICAgc3VnZ2VzdGVkRnJhbWVTdGF0ZS52aWV3cG9ydCxcbiAgICAgICAgc3VnZ2VzdGVkRnJhbWVTdGF0ZS5zdWJ2aWV3cyxcbiAgICAgICAge1xuICAgICAgICAgICAgb3ZlcnJpZGVVc2VyOiB0cnVlLCBcbiAgICAgICAgICAgIHVzZXJUcmFja2luZzogc3VnZ2VzdGVkRnJhbWVTdGF0ZS51c2VyVHJhY2tpbmdcbiAgICAgICAgfVxuICAgICk7XG4gICAgYXBwLmNvbnRleHQuc3VibWl0RnJhbWVTdGF0ZShmcmFtZVN0YXRlKTtcbn0pO1xuXG5hcHAudXBkYXRlRXZlbnQuYWRkRXZlbnRMaXN0ZW5lcigoKSA9PiB7XG4gICAgY29uc3QgdXNlclBvc2UgPSBhcHAuY29udGV4dC5nZXRFbnRpdHlQb3NlKGFwcC5jb250ZXh0LnVzZXIpO1xuICAgIGlmICh1c2VyUG9zZS5zdGF0dXMgJiBBcmdvbi5Qb3NlU3RhdHVzLktOT1dOKSB7XG4gICAgICAgIHVzZXIucG9zaXRpb24uY29weSh1c2VyUG9zZS5wb3NpdGlvbik7XG4gICAgICAgIHVzZXIucXVhdGVybmlvbi5jb3B5KHVzZXJQb3NlLm9yaWVudGF0aW9uKTtcbiAgICAgICAgdXNlckxvY2F0aW9uLnBvc2l0aW9uLmNvcHkodXNlclBvc2UucG9zaXRpb24pO1xuICAgIH1cbn0pXG4gICAgXG5hcHAucmVuZGVyRXZlbnQuYWRkRXZlbnRMaXN0ZW5lcigoKSA9PiB7XG4gICAgY29uc3Qgdmlld3BvcnQgPSBhcHAudmlldy52aWV3cG9ydDtcbiAgICByZW5kZXJlci5zZXRTaXplKHZpZXdwb3J0LndpZHRoLCB2aWV3cG9ydC5oZWlnaHQpO1xuICAgIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8oYXBwLnN1Z2dlc3RlZFBpeGVsUmF0aW8pO1xuICAgIFxuICAgIGZvciAobGV0IHN1YnZpZXcgb2YgYXBwLnZpZXcuc3Vidmlld3MpIHtcbiAgICAgICAgY2FtZXJhLnBvc2l0aW9uLmNvcHkoc3Vidmlldy5wb3NlLnBvc2l0aW9uKTtcbiAgICAgICAgY2FtZXJhLnF1YXRlcm5pb24uY29weShzdWJ2aWV3LnBvc2Uub3JpZW50YXRpb24pO1xuICAgICAgICBjYW1lcmEucHJvamVjdGlvbk1hdHJpeC5mcm9tQXJyYXkoc3Vidmlldy5mcnVzdHVtLnByb2plY3Rpb25NYXRyaXgpO1xuICAgICAgICBsZXQge3gseSx3aWR0aCxoZWlnaHR9ID0gc3Vidmlldy52aWV3cG9ydDtcbiAgICAgICAgcmVuZGVyZXIuc2V0Vmlld3BvcnQoeCx5LHdpZHRoLGhlaWdodCk7XG4gICAgICAgIHJlbmRlcmVyLnNldFNjaXNzb3IoeCx5LHdpZHRoLGhlaWdodCk7XG4gICAgICAgIHJlbmRlcmVyLnNldFNjaXNzb3JUZXN0KHRydWUpO1xuICAgICAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XG4gICAgfVxufSkiXX0=